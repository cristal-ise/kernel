<!--

    This file is part of the CRISTAL-iSE kernel.
    Copyright (c) 2001-2015 The CRISTAL Consortium. All rights reserved.

    This library is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as published
    by the Free Software Foundation; either version 3 of the License, or (at
    your option) any later version.

    This library is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; with out even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
    License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this library; if not, write to the Free Software Foundation,
    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.

    http://www.fsf.org/licensing/licenses/lgpl.html

-->
<cristalscript>
    <param name="item" type="org.cristalise.kernel.entity.proxy.ItemProxy"/>
    <param name="agent" type="org.cristalise.kernel.entity.proxy.AgentProxy"/>
    <param name="job" type="org.cristalise.kernel.entity.agent.Job"/>
    <output name="errors" type="org.cristalise.kernel.scripting.ErrorInfo"/>
    <script language="javascript" name="DescriptionCollectionSetter"><![CDATA[
importClass(org.cristalise.kernel.utils.Logger);
importClass(org.cristalise.kernel.utils.LocalObjectLoader);
importClass(org.cristalise.kernel.utils.CastorHashMap);
importClass(org.cristalise.kernel.lookup.DomainPath);
importClass(org.cristalise.kernel.process.Gateway);
importClass(org.cristalise.kernel.property.Property);

var objType = job.getActPropString("ObjectType");

if (objType == null || objType.isEmpty()) 
throw "Script:DescriptionCollectionSetter - ObjectType not specified in ActProps of Job.";

var descColl;
try {
    descColl = item.getObject("/Collection/"+objType+"/last");
} catch (e) {
    throw "Script:DescriptionCollectionSetter - Collection/"+objType+"/last does not exist!";
}

var newObj;
var objName = job.getOutcome().getField("ObjectID");
var objVer  = job.getOutcome().getField("Version");
var uuid;

if (objName != null && !objName.isEmpty()) {
    try {
        if      (objType.equals("Schema"))       newObj = LocalObjectLoader.getSchema(objName, objVer);
        else if (objType.equals("Script"))       newObj = LocalObjectLoader.getScript(objName, objVer);
        else if (objType.equals("Query"))        newObj = LocalObjectLoader.getQuery(objName, objVer);
        else if (objType.equals("StateMachine")) newObj = LocalObjectLoader.getStateMachine(objName, objVer);
        else {
            var searchProps = new Array(2);

            searchProps[0] = new Property("Name", objName);
            searchProps[1] = new Property("Type", objType);

            var foundItems = Gateway.getLookup().search(new DomainPath("/"), searchProps);

            if(foundItems.hasNext()) {
                uuid = foundItems.next().getItemPath().getUUID();
                if(foundItems.hasNext())
                    throw "Script:DescriptionCollectionSetter - Umbiguous Lookup.search(props Name:"+objName+", Type:"+objType+")";
            }
            else
                throw "Script:DescriptionCollectionSetter - Nothing found for Lookup.search(props Name:"+objName+", Type:"+objType+")";
        }

        var params = new Array(2);
        params[0] = objType;

        //TODO: implement multiplicity check (could be based on a property) instead of hardcoded value
        if ((objType.equals("Schema") || objType.equals("Script") || objType.equals("Query") || objType.equals("StateMachine")) && descColl.size() > 0) {
            Logger.msg(5, "Script:DescriptionCollectionSetter - Deleting existing member for Schema/Script/Query/StateMachine");

            params[1] = descColl.getMembers().list.iterator().next().getID();
            agent.execute(item, "RemoveSlotFromCollection", params);
        }

        var props = new CastorHashMap();
        props.put("Version", objVer, true);

        params = new Array(3);
        params[0] = objType;
        params[2] = agent.marshall(props);

        if(newObj != null) params[1] = newObj.getItemID();
        else               params[1] = uuid;

        Logger.msg(5, "Script:DescriptionCollectionSetter - Adding new member:"+params);

        agent.execute(item, "AddMemberToCollection", params);
    }
    catch (e) {
        Logger.error(e);
        throw e;
    }
}
    ]]></script>
</cristalscript>