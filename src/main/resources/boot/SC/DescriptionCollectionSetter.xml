<!--

    This file is part of the CRISTAL-iSE kernel.
    Copyright (c) 2001-2014 The CRISTAL Consortium. All rights reserved.

    This library is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as published
    by the Free Software Foundation; either version 3 of the License, or (at
    your option) any later version.

    This library is distributed in the hope that it will be useful, but WITHOUT
    ANY WARRANTY; with out even the implied warranty of MERCHANTABILITY or
    FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public
    License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this library; if not, write to the Free Software Foundation,
    Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA.

    http://www.fsf.org/licensing/licenses/lgpl.html

-->
<cristalscript>
	<param name="item" type="org.cristalise.kernel.entity.proxy.ItemProxy"/>
	<param name="agent" type="org.cristalise.kernel.entity.proxy.AgentProxy"/>
	<param name="job" type="org.cristalise.kernel.entity.agent.Job"/>
    <output name="errors" type="org.cristalise.kernel.scripting.ErrorInfo"/>
    <script language="javascript" name="DescriptionCollectionSetter"><![CDATA[
		importClass(org.cristalise.kernel.utils.LocalObjectLoader);

		var objType = job.getActPropString("ObjectType");

		if (objType == null || objType.isEmpty()) 
			throw "ObjectType not specified.";

		
		var descColl;
		try {
			descColl = item.getObject("/Collection/"+objType+"/last");
		} catch (e) {
			throw "Collection "+objType+" does not exist!";
		}
		
		var newObj;
		var objName = job.getOutcome().getField("ObjectID");
		var objVer = job.getOutcome().getField("Version");
		
		if (objName != null && !objName.isEmpty()) {
			try {
				if (objType.equals("Schema"))
					newObj = LocalObjectLoader.getSchema(objName, objVer);
				else if (objType.equals("Script"))
					newObj = LocalObjectLoader.getScript(objName, objVer);
				else if (objType.equals("StateMachine"))
					newObj = LocalObjectLoader.getStateMachine(objName, objVer);
			} catch (e) {
				throw e;
			}
		}

		var params = new Array(2);
		params[0] = objType;			
		if (descColl.size() > 0) {
			params[1] = descColl.getMembers().list.iterator().next().getID();
			agent.execute(item, "RemoveSlotFromCollection", params);
		}
		
		if (newObj != null) {
			params[1] = newObj.getItemID();
			agent.execute(item, "AddMemberToCollection", params);
		}
		
		
		]]></script>
</cristalscript>